{
  "version": 3,
  "sources": [
    "node_modules\\browserify\\node_modules\\browser-pack\\_prelude.js",
    "lib/abi.js",
    "lib/const.js",
    "lib/contract.js",
    "lib/db.js",
    "lib/eth.js",
    "lib/event.js",
    "lib/filter.js",
    "lib/formatters.js",
    "lib/httpsync.js",
    "lib/jsonrpc.js",
    "lib/qtsync.js",
    "lib/requestmanager.js",
    "lib/shh.js",
    "lib/types.js",
    "lib/utils.js",
    "lib/watches.js",
    "lib/web3.js",
    "index.js"
  ],
  "names": [],
  "mappingslNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACznCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrxjhDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACj
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "/*\r\n    This file is part of ethereum.js.\r\n\r\n    ethereum.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ethereum.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/** @file abi.js\r\n * @authors:\r\n *   Marek Kotewicz <marek@ethdev.com>\r\n *   Gav Wood <g@ethdev.com>\r\n * @date 2014\r\n */\r\n\r\nvar web3 = require('./web3'); \r\nvar utils = require('./utils');\r\nvar types = require('./types');\r\nvar c = require('./const');\r\nvar f = require('./formatters');\r\n\r\nvar displayTypeError = function (type) {\r\n    console.error('parser does not support type: ' + type);\r\n};\r\n\r\n/// This method should be called if we want to check if givent type is an array type\r\n/// @returns true if it is, otherwise false\r\nvar arrayType = function (type) {\r\n    return type.slice(-2) === '[]';\r\n};\r\n\r\nvar dynamicTypeBytes = function (type, value) {\r\n    // TODO: decide what to do with array of strings\r\n    if (arrayType(type) || type === 'string')    // only string itself that is dynamic; stringX is static length.\r\n        return f.formatInputInt(value.length); \r\n    return \"\";\r\n};\r\n\r\nvar inputTypes = types.inputTypes(); \r\n\r\n/// Formats input params to bytes\r\n/// @param abi contract method inputs\r\n/// @param array of params that will be formatted to bytes\r\n/// @returns bytes representation of input params\r\nvar formatInput = function (inputs, params) {\r\n    var bytes = \"\";\r\n\r\n    /// first we iterate in search for dynamic \r\n    inputs.forEach(function (input, index) {\r\n        bytes += dynamicTypeBytes(input.type, params[index]);\r\n    });\r\n\r\n    inputs.forEach(function (input, i) {\r\n        var typeMatch = false;\r\n        for (var j = 0; j < inputTypes.length && !typeMatch; j++) {\r\n            typeMatch = inputTypes[j].type(inputs[i].type, params[i]);\r\n        }\r\n        if (!typeMatch) {\r\n            displayTypeError(inputs[i].type);\r\n        }\r\n\r\n        var formatter = inputTypes[j - 1].format;\r\n        var toAppend = \"\";\r\n\r\n        if (arrayType(inputs[i].type))\r\n            toAppend = params[i].reduce(function (acc, curr) {\r\n                return acc + formatter(curr);\r\n            }, \"\");\r\n        else\r\n            toAppend = formatter(params[i]);\r\n\r\n        bytes += toAppend; \r\n    });\r\n    return bytes;\r\n};\r\n\r\nvar dynamicBytesLength = function (type) {\r\n    if (arrayType(type) || type === 'string')   // only string itself that is dynamic; stringX is static length.\r\n        return c.ETH_PADDING * 2;\r\n    return 0;\r\n};\r\n\r\nvar outputTypes = types.outputTypes(); \r\n\r\n/// Formats output bytes back to param list\r\n/// @param contract abi method outputs\r\n/// @param bytes representtion of output \r\n/// @returns array of output params \r\nvar formatOutput = function (outs, output) {\r\n    \r\n    output = output.slice(2);\r\n    var result = [];\r\n    var padding = c.ETH_PADDING * 2;\r\n\r\n    var dynamicPartLength = outs.reduce(function (acc, curr) {\r\n        return acc + dynamicBytesLength(curr.type);\r\n    }, 0);\r\n    \r\n    var dynamicPart = output.slice(0, dynamicPartLength);\r\n    output = output.slice(dynamicPartLength);\r\n\r\n    outs.forEach(function (out, i) {\r\n        /*jshint maxcomplexity:6 */\r\n        var typeMatch = false;\r\n        for (var j = 0; j < outputTypes.length && !typeMatch; j++) {\r\n            typeMatch = outputTypes[j].type(outs[i].type);\r\n        }\r\n\r\n        if (!typeMatch) {\r\n            displayTypeError(outs[i].type);\r\n        }\r\n\r\n        var formatter = outputTypes[j - 1].format;\r\n        if (arrayType(outs[i].type)) {\r\n            var size = f.formatOutputUInt(dynamicPart.slice(0, padding));\r\n            dynamicPart = dynamicPart.slice(padding);\r\n            var array = [];\r\n            for (var k = 0; k < size; k++) {\r\n                array.push(formatter(output.slice(0, padding))); \r\n                output = output.slice(padding);\r\n            }\r\n            result.push(array);\r\n        }\r\n        else if (types.prefixedType('string')(outs[i].type)) {\r\n            dynamicPart = dynamicPart.slice(padding); \r\n            result.push(formatter(output.slice(0, padding)));\r\n            output = output.slice(padding);\r\n        } else {\r\n            result.push(formatter(output.slice(0, padding)));\r\n            output = output.slice(padding);\r\n        }\r\n    });\r\n\r\n    return result;\r\n};\r\n\r\n/// @param json abi for contract\r\n/// @returns input parser object for given json abi\r\n/// TODO: refactor creating the parser, do not double logic from contract\r\nvar inputParser = function (json) {\r\n    var parser = {};\r\n    json.forEach(function (method) {\r\n        var displayName = utils.extractDisplayName(method.name); \r\n        var typeName = utils.extractTypeName(method.name);\r\n\r\n        var impl = function () {\r\n            var params = Array.prototype.slice.call(arguments);\r\n            return formatInput(method.inputs, params);\r\n        };\r\n       \r\n        if (parser[displayName] === undefined) {\r\n            parser[displayName] = impl;\r\n        }\r\n\r\n        parser[displayName][typeName] = impl;\r\n    });\r\n\r\n    return parser;\r\n};\r\n\r\n/// @param json abi for contract\r\n/// @returns output parser for given json abi\r\nvar outputParser = function (json) {\r\n    var parser = {};\r\n    json.forEach(function (method) {\r\n\r\n        var displayName = utils.extractDisplayName(method.name); \r\n        var typeName = utils.extractTypeName(method.name);\r\n\r\n        var impl = function (output) {\r\n            return formatOutput(method.outputs, output);\r\n        };\r\n\r\n        if (parser[displayName] === undefined) {\r\n            parser[displayName] = impl;\r\n        }\r\n\r\n        parser[displayName][typeName] = impl;\r\n    });\r\n\r\n    return parser;\r\n};\r\n\r\n/// @param function/event name for which we want to get signature\r\n/// @returns signature of function/event with given name\r\nvar signatureFromAscii = function (name) {\r\n    return web3.sha3(web3.fromAscii(name)).slice(0, 2 + c.ETH_SIGNATURE_LENGTH * 2);\r\n};\r\n\r\nvar eventSignatureFromAscii = function (name) {\r\n    return web3.sha3(web3.fromAscii(name));\r\n};\r\n\r\nmodule.exports = {\r\n    inputParser: inputParser,\r\n    outputParser: outputParser,\r\n    formatInput: formatInput,\r\n    formatOutput: formatOutput,\r\n    signatureFromAscii: signatureFromAscii,\r\n    eventSignatureFromAscii: eventSignatureFromAscii\r\n};\r\n\r\n",
    "/*\r\n    This file is part of ethereum.js.\r\n\r\n    ethereum.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ethereum.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/** @file const.js\r\n * @authors:\r\n *   Marek Kotewicz <marek@ethdev.com>\r\n * @date 2015\r\n */\r\n\r\n/// required to define ETH_BIGNUMBER_ROUNDING_MODE\r\nif (\"build\" !== 'build') {/*\r\n    var BigNumber = require('bignumber.js'); // jshint ignore:line\r\n*/}\r\n\r\nvar ETH_UNITS = [ \r\n    'wei', \r\n    'Kwei', \r\n    'Mwei', \r\n    'Gwei', \r\n    'szabo', \r\n    'finney', \r\n    'ether', \r\n    'grand', \r\n    'Mether', \r\n    'Gether', \r\n    'Tether', \r\n    'Pether', \r\n    'Eether', \r\n    'Zether', \r\n    'Yether', \r\n    'Nether', \r\n    'Dether', \r\n    'Vether', \r\n    'Uether' \r\n];\r\n\r\nmodule.exports = {\r\n    ETH_PADDING: 32,\r\n    ETH_SIGNATURE_LENGTH: 4,\r\n    ETH_UNITS: ETH_UNITS,\r\n    ETH_BIGNUMBER_ROUNDING_MODE: { ROUNDING_MODE: BigNumber.ROUND_DOWN },\r\n    ETH_POLLING_TIMEOUT: 1000\r\n};\r\n\r\n",
    "/*\r\n    This file is part of ethereum.js.\r\n\r\n    ethereum.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ethereum.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/** @file contract.js\r\n * @authors:\r\n *   Marek Kotewicz <marek@ethdev.com>\r\n * @date 2014\r\n */\r\n\r\nvar web3 = require('./web3'); \r\nvar abi = require('./abi');\r\nvar utils = require('./utils');\r\nvar eventImpl = require('./event');\r\n\r\nvar exportNatspecGlobals = function (vars) {\r\n    // it's used byt natspec.js\r\n    // TODO: figure out better way to solve this\r\n    web3._currentContractAbi = vars.abi;\r\n    web3._currentContractAddress = vars.address;\r\n    web3._currentContractMethodName = vars.method;\r\n    web3._currentContractMethodParams = vars.params;\r\n};\r\n\r\nvar addFunctionRelatedPropertiesToContract = function (contract) {\r\n    \r\n    contract.call = function (options) {\r\n        contract._isTransact = false;\r\n        contract._options = options;\r\n        return contract;\r\n    };\r\n\r\n    contract.transact = function (options) {\r\n        contract._isTransact = true;\r\n        contract._options = options;\r\n        return contract;\r\n    };\r\n\r\n    contract._options = {};\r\n    ['gas', 'gasPrice', 'value', 'from'].forEach(function(p) {\r\n        contract[p] = function (v) {\r\n            contract._options[p] = v;\r\n            return contract;\r\n        };\r\n    });\r\n\r\n};\r\n\r\nvar addFunctionsToContract = function (contract, desc, address) {\r\n    var inputParser = abi.inputParser(desc);\r\n    var outputParser = abi.outputParser(desc);\r\n\r\n    // create contract functions\r\n    utils.filterFunctions(desc).forEach(function (method) {\r\n\r\n        var displayName = utils.extractDisplayName(method.name);\r\n        var typeName = utils.extractTypeName(method.name);\r\n\r\n        var impl = function () {\r\n            /*jshint maxcomplexity:7 */\r\n            var params = Array.prototype.slice.call(arguments);\r\n            var signature = abi.signatureFromAscii(method.name);\r\n            var parsed = inputParser[displayName][typeName].apply(null, params);\r\n\r\n            var options = contract._options || {};\r\n            options.to = address;\r\n            options.data = signature + parsed;\r\n            \r\n            var isTransact = contract._isTransact === true || (contract._isTransact !== false && !method.constant);\r\n            var collapse = options.collapse !== false;\r\n            \r\n            // reset\r\n            contract._options = {};\r\n            contract._isTransact = null;\r\n\r\n            if (isTransact) {\r\n                \r\n                exportNatspecGlobals({\r\n                    abi: desc,\r\n                    address: address,\r\n                    method: method.name,\r\n                    params: params\r\n                });\r\n\r\n                // transactions do not have any output, cause we do not know, when they will be processed\r\n                web3.eth.transact(options);\r\n                return;\r\n            }\r\n            \r\n            var output = web3.eth.call(options);\r\n            var ret = outputParser[displayName][typeName](output);\r\n            if (collapse)\r\n            {\r\n                if (ret.length === 1)\r\n                    ret = ret[0];\r\n                else if (ret.length === 0)\r\n                    ret = null;\r\n            }\r\n            return ret;\r\n        };\r\n\r\n        if (contract[displayName] === undefined) {\r\n            contract[displayName] = impl;\r\n        }\r\n\r\n        contract[displayName][typeName] = impl;\r\n    });\r\n};\r\n\r\nvar addEventRelatedPropertiesToContract = function (contract, desc, address) {\r\n    contract.address = address;\r\n    contract._onWatchEventResult = function (data) {\r\n        var matchingEvent = event.getMatchingEvent(utils.filterEvents(desc));\r\n        var parser = eventImpl.outputParser(matchingEvent);\r\n        return parser(data);\r\n    };\r\n    \r\n    Object.defineProperty(contract, 'topic', {\r\n        get: function() {\r\n            return utils.filterEvents(desc).map(function (e) {\r\n                return abi.eventSignatureFromAscii(e.name);\r\n            });\r\n        }\r\n    });\r\n\r\n};\r\n\r\nvar addEventsToContract = function (contract, desc, address) {\r\n    // create contract events\r\n    utils.filterEvents(desc).forEach(function (e) {\r\n\r\n        var impl = function () {\r\n            var params = Array.prototype.slice.call(arguments);\r\n            var signature = abi.eventSignatureFromAscii(e.name);\r\n            var event = eventImpl.inputParser(address, signature, e);\r\n            var o = event.apply(null, params);\r\n            var outputFormatter = function (data) {\r\n                var parser = eventImpl.outputParser(e);\r\n                return parser(data);\r\n            };\r\n            return web3.eth.watch(o, undefined, undefined, outputFormatter);\r\n        };\r\n        \r\n        // this property should be used by eth.filter to check if object is an event\r\n        impl._isEvent = true;\r\n\r\n        var displayName = utils.extractDisplayName(e.name);\r\n        var typeName = utils.extractTypeName(e.name);\r\n\r\n        if (contract[displayName] === undefined) {\r\n            contract[displayName] = impl;\r\n        }\r\n\r\n        contract[displayName][typeName] = impl;\r\n\r\n    });\r\n};\r\n\r\n\r\n/**\r\n * This method should be called when we want to call / transact some solidity method from javascript\r\n * it returns an object which has same methods available as solidity contract description\r\n * usage example: \r\n *\r\n * var abi = [{\r\n *      name: 'myMethod',\r\n *      inputs: [{ name: 'a', type: 'string' }],\r\n *      outputs: [{name: 'd', type: 'string' }]\r\n * }];  // contract abi\r\n *\r\n * var myContract = web3.eth.contract('0x0123123121', abi); // creation of contract object\r\n *\r\n * myContract.myMethod('this is test string param for call'); // myMethod call (implicit, default)\r\n * myContract.call().myMethod('this is test string param for call'); // myMethod call (explicit)\r\n * myContract.transact().myMethod('this is test string param for transact'); // myMethod transact\r\n *\r\n * @param address - address of the contract, which should be called\r\n * @param desc - abi json description of the contract, which is being created\r\n * @returns contract object\r\n */\r\n\r\nvar contract = function (address, desc) {\r\n\r\n    // workaround for invalid assumption that method.name is the full anonymous prototype of the method.\r\n    // it's not. it's just the name. the rest of the code assumes it's actually the anonymous\r\n    // prototype, so we make it so as a workaround.\r\n    // TODO: we may not want to modify input params, maybe use copy instead?\r\n    desc.forEach(function (method) {\r\n        if (method.name.indexOf('(') === -1) {\r\n            var displayName = method.name;\r\n            var typeName = method.inputs.map(function(i){return i.type; }).join();\r\n            method.name = displayName + '(' + typeName + ')';\r\n        }\r\n    });\r\n\r\n    var result = {};\r\n    addFunctionRelatedPropertiesToContract(result);\r\n    addFunctionsToContract(result, desc, address);\r\n    addEventRelatedPropertiesToContract(result, desc, address);\r\n    addEventsToContract(result, desc, address);\r\n\r\n    return result;\r\n};\r\n\r\nmodule.exports = contract;\r\n\r\n",
    "/*\r\n    This file is part of ethereum.js.\r\n\r\n    ethereum.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ethereum.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/** @file db.js\r\n * @authors:\r\n *   Marek Kotewicz <marek@ethdev.com>\r\n * @date 2015\r\n */\r\n\r\n/// @returns an array of objects describing web3.db api methods\r\nvar methods = function () {\r\n    return [\r\n    { name: 'put', call: 'db_put' },\r\n    { name: 'get', call: 'db_get' },\r\n    { name: 'putString', call: 'db_putString' },\r\n    { name: 'getString', call: 'db_getString' }\r\n    ];\r\n};\r\n\r\nmodule.exports = {\r\n    methods: methods\r\n};\r\n",
    "/*\r\n    This file is part of ethereum.js.\r\n\r\n    ethereum.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ethereum.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/** @file eth.js\r\n * @authors:\r\n *   Marek Kotewicz <marek@ethdev.com>\r\n * @date 2015\r\n */\r\n\r\n/// @returns an array of objects describing web3.eth api methods\r\nvar methods = function () {\r\n    var blockCall = function (args) {\r\n        return typeof args[0] === \"string\" ? \"eth_blockByHash\" : \"eth_blockByNumber\";\r\n    };\r\n\r\n    var transactionCall = function (args) {\r\n        return typeof args[0] === \"string\" ? 'eth_transactionByHash' : 'eth_transactionByNumber';\r\n    };\r\n\r\n    var uncleCall = function (args) {\r\n        return typeof args[0] === \"string\" ? 'eth_uncleByHash' : 'eth_uncleByNumber';\r\n    };\r\n\r\n    var transactionCountCall = function (args) {\r\n        return typeof args[0] === \"string\" ? 'eth_transactionCountByHash' : 'eth_transactionCountByNumber';\r\n    };\r\n\r\n    var uncleCountCall = function (args) {\r\n        return typeof args[0] === \"string\" ? 'eth_uncleCountByHash' : 'eth_uncleCountByNumber';\r\n    };\r\n\r\n    return [\r\n    { name: 'balanceAt', call: 'eth_balanceAt' },\r\n    { name: 'stateAt', call: 'eth_stateAt' },\r\n    { name: 'storageAt', call: 'eth_storageAt' },\r\n    { name: 'countAt', call: 'eth_countAt'},\r\n    { name: 'codeAt', call: 'eth_codeAt' },\r\n    { name: 'transact', call: 'eth_transact' },\r\n    { name: 'call', call: 'eth_call' },\r\n    { name: 'block', call: blockCall },\r\n    { name: 'transaction', call: transactionCall },\r\n    { name: 'uncle', call: uncleCall },\r\n    { name: 'compilers', call: 'eth_compilers' },\r\n    { name: 'flush', call: 'eth_flush' },\r\n    { name: 'lll', call: 'eth_lll' },\r\n    { name: 'solidity', call: 'eth_solidity' },\r\n    { name: 'serpent', call: 'eth_serpent' },\r\n    { name: 'logs', call: 'eth_logs' },\r\n    { name: 'transactionCount', call: transactionCountCall },\r\n    { name: 'uncleCount', call: uncleCountCall }\r\n    ];\r\n};\r\n\r\n/// @returns an array of objects describing web3.eth api properties\r\nvar properties = function () {\r\n    return [\r\n    { name: 'coinbase', getter: 'eth_coinbase', setter: 'eth_setCoinbase' },\r\n    { name: 'listening', getter: 'eth_listening', setter: 'eth_setListening' },\r\n    { name: 'mining', getter: 'eth_mining', setter: 'eth_setMining' },\r\n    { name: 'gasPrice', getter: 'eth_gasPrice' },\r\n    { name: 'accounts', getter: 'eth_accounts' },\r\n    { name: 'peerCount', getter: 'eth_peerCount' },\r\n    { name: 'defaultBlock', getter: 'eth_defaultBlock', setter: 'eth_setDefaultBlock' },\r\n    { name: 'number', getter: 'eth_number'}\r\n    ];\r\n};\r\n\r\nmodule.exports = {\r\n    methods: methods,\r\n    properties: properties\r\n};\r\n\r\n",
    "/*\r\n    This file is part of ethereum.js.\r\n\r\n    ethereum.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ethereum.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/** @file event.js\r\n * @authors:\r\n *   Marek Kotewicz <marek@ethdev.com>\r\n * @date 2014\r\n */\r\n\r\nvar abi = require('./abi');\r\nvar utils = require('./utils');\r\n\r\n/// filter inputs array && returns only indexed (or not) inputs\r\n/// @param inputs array\r\n/// @param bool if result should be an array of indexed params on not\r\n/// @returns array of (not?) indexed params\r\nvar filterInputs = function (inputs, indexed) {\r\n    return inputs.filter(function (current) {\r\n        return current.indexed === indexed;\r\n    });\r\n};\r\n\r\nvar inputWithName = function (inputs, name) {\r\n    var index = utils.findIndex(inputs, function (input) {\r\n        return input.name === name;\r\n    });\r\n    \r\n    if (index === -1) {\r\n        console.error('indexed param with name ' + name + ' not found');\r\n        return undefined;\r\n    }\r\n    return inputs[index];\r\n};\r\n\r\nvar indexedParamsToTopics = function (event, indexed) {\r\n    // sort keys?\r\n    return Object.keys(indexed).map(function (key) {\r\n        var inputs = [inputWithName(filterInputs(event.inputs, true), key)];\r\n\r\n        var value = indexed[key];\r\n        if (value instanceof Array) {\r\n            return value.map(function (v) {\r\n                return abi.formatInput(inputs, [v]);\r\n            }); \r\n        }\r\n        return abi.formatInput(inputs, [value]);\r\n    });\r\n};\r\n\r\nvar inputParser = function (address, signature, event) {\r\n    \r\n    // valid options are 'earliest', 'latest', 'offset' and 'max', as defined for 'eth.watch'\r\n    return function (indexed, options) {\r\n        var o = options || {};\r\n        o.address = address;\r\n        o.topic = [];\r\n        o.topic.push(signature);\r\n        if (indexed) {\r\n            o.topic = o.topic.concat(indexedParamsToTopics(event, indexed));\r\n        }\r\n        return o;\r\n    };\r\n};\r\n\r\nvar getArgumentsObject = function (inputs, indexed, notIndexed) {\r\n    var indexedCopy = indexed.slice();\r\n    var notIndexedCopy = notIndexed.slice();\r\n    return inputs.reduce(function (acc, current) {\r\n        var value;\r\n        if (current.indexed)\r\n            value = indexedCopy.splice(0, 1)[0];\r\n        else\r\n            value = notIndexedCopy.splice(0, 1)[0];\r\n\r\n        acc[current.name] = value;\r\n        return acc;\r\n    }, {}); \r\n};\r\n \r\nvar outputParser = function (event) {\r\n    \r\n    return function (output) {\r\n        var result = {\r\n            event: utils.extractDisplayName(event.name),\r\n            number: output.number,\r\n            args: {}\r\n        };\r\n\r\n        output.topics = output.topic; // fallback for go-ethereum\r\n        if (!output.topic) {\r\n            return result;\r\n        }\r\n       \r\n        var indexedOutputs = filterInputs(event.inputs, true);\r\n        var indexedData = \"0x\" + output.topic.slice(1, output.topic.length).map(function (topic) { return topic.slice(2); }).join(\"\");\r\n        var indexedRes = abi.formatOutput(indexedOutputs, indexedData);\r\n\r\n        var notIndexedOutputs = filterInputs(event.inputs, false);\r\n        var notIndexedRes = abi.formatOutput(notIndexedOutputs, output.data);\r\n\r\n        result.args = getArgumentsObject(event.inputs, indexedRes, notIndexedRes);\r\n\r\n        return result;\r\n    };\r\n};\r\n\r\nvar getMatchingEvent = function (events, payload) {\r\n    for (var i = 0; i < events.length; i++) {\r\n        var signature = abi.eventSignatureFromAscii(events[i].name); \r\n        if (signature === payload.topic[0]) {\r\n            return events[i];\r\n        }\r\n    }\r\n    return undefined;\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    inputParser: inputParser,\r\n    outputParser: outputParser,\r\n    getMatchingEvent: getMatchingEvent\r\n};\r\n\r\n",
    "/*\r\n    This file is part of ethereum.js.\r\n\r\n    ethereum.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ethereum.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/** @file filter.js\r\n * @authors:\r\n *   Jeffrey Wilcke <jeff@ethdev.com>\r\n *   Marek Kotewicz <marek@ethdev.com>\r\n *   Marian Oancea <marian@ethdev.com>\r\n *   Gav Wood <g@ethdev.com>\r\n * @date 2014\r\n */\r\n\r\n/// Should be called to check if filter implementation is valid\r\n/// @returns true if it is, otherwise false\r\nvar implementationIsValid = function (i) {\r\n    return !!i && \r\n        typeof i.newFilter === 'function' && \r\n        typeof i.getMessages === 'function' && \r\n        typeof i.uninstallFilter === 'function' &&\r\n        typeof i.startPolling === 'function' &&\r\n        typeof i.stopPolling === 'function';\r\n};\r\n\r\n/// This method should be called on options object, to verify deprecated properties && lazy load dynamic ones\r\n/// @param should be string or object\r\n/// @returns options string or object\r\nvar getOptions = function (options) {\r\n    if (typeof options === 'string') {\r\n        return options;\r\n    } \r\n\r\n    options = options || {};\r\n\r\n    if (options.topics) {\r\n        console.warn('\"topics\" is deprecated, is \"topic\" instead');\r\n    }\r\n\r\n    // evaluate lazy properties\r\n    return {\r\n        to: options.to,\r\n        topic: options.topic,\r\n        earliest: options.earliest,\r\n        latest: options.latest,\r\n        max: options.max,\r\n        skip: options.skip,\r\n        address: options.address\r\n    };\r\n};\r\n\r\n/// Should be used when we want to watch something\r\n/// it's using inner polling mechanism and is notified about changes\r\n/// @param options are filter options\r\n/// @param implementation, an abstract polling implementation\r\n/// @param formatter (optional), callback function which formats output before 'real' callback \r\nvar filter = function(options, implementation, formatter) {\r\n    if (!implementationIsValid(implementation)) {\r\n        console.error('filter implemenation is invalid');\r\n        return;\r\n    }\r\n\r\n    options = getOptions(options);\r\n    var callbacks = [];\r\n    var filterId = implementation.newFilter(options);\r\n    var onMessages = function (messages) {\r\n        messages.forEach(function (message) {\r\n            message = formatter ? formatter(message) : message;\r\n            callbacks.forEach(function (callback) {\r\n                callback(message);\r\n            });\r\n        });\r\n    };\r\n\r\n    implementation.startPolling(filterId, onMessages, implementation.uninstallFilter);\r\n\r\n    var changed = function (callback) {\r\n        callbacks.push(callback);\r\n    };\r\n\r\n    var messages = function () {\r\n        return implementation.getMessages(filterId);\r\n    };\r\n    \r\n    var uninstall = function () {\r\n        implementation.stopPolling(filterId);\r\n        implementation.uninstallFilter(filterId);\r\n        callbacks = [];\r\n    };\r\n\r\n    return {\r\n        changed: changed,\r\n        arrived: changed,\r\n        happened: changed,\r\n        messages: messages,\r\n        logs: messages,\r\n        uninstall: uninstall\r\n    };\r\n};\r\n\r\nmodule.exports = filter;\r\n\r\n",
    "/*\r\n    This file is part of ethereum.js.\r\n\r\n    ethereum.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ethereum.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/** @file formatters.js\r\n * @authors:\r\n *   Marek Kotewicz <marek@ethdev.com>\r\n * @date 2015\r\n */\r\n\r\nif (\"build\" !== 'build') {/*\r\n    var BigNumber = require('bignumber.js'); // jshint ignore:line\r\n*/}\r\n\r\nvar utils = require('./utils');\r\nvar c = require('./const');\r\n\r\n/// @param string string to be padded\r\n/// @param number of characters that result string should have\r\n/// @param sign, by default 0\r\n/// @returns right aligned string\r\nvar padLeft = function (string, chars, sign) {\r\n    return new Array(chars - string.length + 1).join(sign ? sign : \"0\") + string;\r\n};\r\n\r\n/// Formats input value to byte representation of int\r\n/// If value is negative, return it's two's complement\r\n/// If the value is floating point, round it down\r\n/// @returns right-aligned byte representation of int\r\nvar formatInputInt = function (value) {\r\n    /*jshint maxcomplexity:7 */\r\n    var padding = c.ETH_PADDING * 2;\r\n    if (value instanceof BigNumber || typeof value === 'number') {\r\n        if (typeof value === 'number')\r\n            value = new BigNumber(value);\r\n        BigNumber.config(c.ETH_BIGNUMBER_ROUNDING_MODE);\r\n        value = value.round();\r\n\r\n        if (value.lessThan(0)) \r\n            value = new BigNumber(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", 16).plus(value).plus(1);\r\n        value = value.toString(16);\r\n    }\r\n    else if (value.indexOf('0x') === 0)\r\n        value = value.substr(2);\r\n    else if (typeof value === 'string')\r\n        value = formatInputInt(new BigNumber(value));\r\n    else\r\n        value = (+value).toString(16);\r\n    return padLeft(value, padding);\r\n};\r\n\r\n/// Formats input value to byte representation of string\r\n/// @returns left-algined byte representation of string\r\nvar formatInputString = function (value) {\r\n    return utils.fromAscii(value, c.ETH_PADDING).substr(2);\r\n};\r\n\r\n/// Formats input value to byte representation of bool\r\n/// @returns right-aligned byte representation bool\r\nvar formatInputBool = function (value) {\r\n    return '000000000000000000000000000000000000000000000000000000000000000' + (value ?  '1' : '0');\r\n};\r\n\r\n/// Formats input value to byte representation of real\r\n/// Values are multiplied by 2^m and encoded as integers\r\n/// @returns byte representation of real\r\nvar formatInputReal = function (value) {\r\n    return formatInputInt(new BigNumber(value).times(new BigNumber(2).pow(128))); \r\n};\r\n\r\n\r\n/// Check if input value is negative\r\n/// @param value is hex format\r\n/// @returns true if it is negative, otherwise false\r\nvar signedIsNegative = function (value) {\r\n    return (new BigNumber(value.substr(0, 1), 16).toString(2).substr(0, 1)) === '1';\r\n};\r\n\r\n/// Formats input right-aligned input bytes to int\r\n/// @returns right-aligned input bytes formatted to int\r\nvar formatOutputInt = function (value) {\r\n    value = value || \"0\";\r\n    // check if it's negative number\r\n    // it it is, return two's complement\r\n    if (signedIsNegative(value)) {\r\n        return new BigNumber(value, 16).minus(new BigNumber('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)).minus(1);\r\n    }\r\n    return new BigNumber(value, 16);\r\n};\r\n\r\n/// Formats big right-aligned input bytes to uint\r\n/// @returns right-aligned input bytes formatted to uint\r\nvar formatOutputUInt = function (value) {\r\n    value = value || \"0\";\r\n    return new BigNumber(value, 16);\r\n};\r\n\r\n/// @returns input bytes formatted to real\r\nvar formatOutputReal = function (value) {\r\n    return formatOutputInt(value).dividedBy(new BigNumber(2).pow(128)); \r\n};\r\n\r\n/// @returns input bytes formatted to ureal\r\nvar formatOutputUReal = function (value) {\r\n    return formatOutputUInt(value).dividedBy(new BigNumber(2).pow(128)); \r\n};\r\n\r\n/// @returns right-aligned input bytes formatted to hex\r\nvar formatOutputHash = function (value) {\r\n    return \"0x\" + value;\r\n};\r\n\r\n/// @returns right-aligned input bytes formatted to bool\r\nvar formatOutputBool = function (value) {\r\n    return value === '0000000000000000000000000000000000000000000000000000000000000001' ? true : false;\r\n};\r\n\r\n/// @returns left-aligned input bytes formatted to ascii string\r\nvar formatOutputString = function (value) {\r\n    return utils.toAscii(value);\r\n};\r\n\r\n/// @returns right-aligned input bytes formatted to address\r\nvar formatOutputAddress = function (value) {\r\n    return \"0x\" + value.slice(value.length - 40, value.length);\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    formatInputInt: formatInputInt,\r\n    formatInputString: formatInputString,\r\n    formatInputBool: formatInputBool,\r\n    formatInputReal: formatInputReal,\r\n    formatOutputInt: formatOutputInt,\r\n    formatOutputUInt: formatOutputUInt,\r\n    formatOutputReal: formatOutputReal,\r\n    formatOutputUReal: formatOutputUReal,\r\n    formatOutputHash: formatOutputHash,\r\n    formatOutputBool: formatOutputBool,\r\n    formatOutputString: formatOutputString,\r\n    formatOutputAddress: formatOutputAddress\r\n};\r\n\r\n",
    "/*\r\n    This file is part of ethereum.js.\r\n\r\n    ethereum.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ethereum.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/** @file httpsync.js\r\n * @authors:\r\n *   Marek Kotewicz <marek@ethdev.com>\r\n *   Marian Oancea <marian@ethdev.com>\r\n * @date 2014\r\n */\r\n\r\nif (\"build\" !== 'build') {/*\r\n        var XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest; // jshint ignore:line\r\n*/}\r\n\r\nvar HttpSyncProvider = function (host) {\r\n    this.handlers = [];\r\n    this.host = host || 'http://localhost:8080';\r\n};\r\n\r\nHttpSyncProvider.prototype.send = function (payload) {\r\n    //var data = formatJsonRpcObject(payload);\r\n\r\n    var request = new XMLHttpRequest();\r\n    request.open('POST', this.host, false);\r\n    request.send(JSON.stringify(payload));\r\n\r\n    var result = request.responseText;\r\n    // check request.status\r\n    if(request.status !== 200)\r\n        return;\r\n    return JSON.parse(result);\r\n};\r\n\r\nmodule.exports = HttpSyncProvider;\r\n\r\n",
    "/*\r\n    This file is part of ethereum.js.\r\n\r\n    ethereum.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ethereum.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/** @file jsonrpc.js\r\n * @authors:\r\n *   Marek Kotewicz <marek@ethdev.com>\r\n * @date 2015\r\n */\r\n\r\nvar messageId = 1;\r\n\r\n/// Should be called to valid json create payload object\r\n/// @param method of jsonrpc call, required\r\n/// @param params, an array of method params, optional\r\n/// @returns valid jsonrpc payload object\r\nvar toPayload = function (method, params) {\r\n    if (!method)\r\n        console.error('jsonrpc method should be specified!');\r\n\r\n    return {\r\n        jsonrpc: '2.0',\r\n        method: method,\r\n        params: params || [],\r\n        id: messageId++\r\n    }; \r\n};\r\n\r\n/// Should be called to check if jsonrpc response is valid\r\n/// @returns true if response is valid, otherwise false \r\nvar isValidResponse = function (response) {\r\n    return !!response &&\r\n        !response.error &&\r\n        response.jsonrpc === '2.0' &&\r\n        typeof response.id === 'number' &&\r\n        response.result !== undefined; // only undefined is not valid json object\r\n};\r\n\r\n/// Should be called to create batch payload object\r\n/// @param messages, an array of objects with method (required) and params (optional) fields\r\nvar toBatchPayload = function (messages) {\r\n    return messages.map(function (message) {\r\n        return toPayload(message.method, message.params);\r\n    }); \r\n};\r\n\r\nmodule.exports = {\r\n    toPayload: toPayload,\r\n    isValidResponse: isValidResponse,\r\n    toBatchPayload: toBatchPayload\r\n};\r\n\r\n\r\n",
    "/*\r\n    This file is part of ethereum.js.\r\n\r\n    ethereum.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ethereum.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/** @file qtsync.js\r\n * @authors:\r\n *   Marek Kotewicz <marek@ethdev.com>\r\n *   Marian Oancea <marian@ethdev.com>\r\n * @date 2014\r\n */\r\n\r\nvar QtSyncProvider = function () {\r\n};\r\n\r\nQtSyncProvider.prototype.send = function (payload) {\r\n    var result = navigator.qt.callMethod(JSON.stringify(payload));\r\n    return JSON.parse(result);\r\n};\r\n\r\nmodule.exports = QtSyncProvider;\r\n\r\n",
    "/*\r\n    This file is part of ethereum.js.\r\n\r\n    ethereum.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ethereum.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/** @file requestmanager.js\r\n * @authors:\r\n *   Jeffrey Wilcke <jeff@ethdev.com>\r\n *   Marek Kotewicz <marek@ethdev.com>\r\n *   Marian Oancea <marian@ethdev.com>\r\n *   Gav Wood <g@ethdev.com>\r\n * @date 2014\r\n */\r\n\r\nvar jsonrpc = require('./jsonrpc');\r\nvar c = require('./const');\r\n\r\n/**\r\n * It's responsible for passing messages to providers\r\n * It's also responsible for polling the ethereum node for incoming messages\r\n * Default poll timeout is 1 second\r\n */\r\nvar requestManager = function() {\r\n    var polls = [];\r\n    var provider;\r\n\r\n    var send = function (data) {\r\n        var payload = jsonrpc.toPayload(data.method, data.params);\r\n        \r\n        if (!provider) {\r\n            console.error('provider is not set');\r\n            return null;\r\n        }\r\n\r\n        var result = provider.send(payload);\r\n\r\n        if (!jsonrpc.isValidResponse(result)) {\r\n            console.log(result);\r\n            return null;\r\n        }\r\n        \r\n        return result.result;\r\n    };\r\n\r\n    var setProvider = function (p) {\r\n        provider = p;\r\n    };\r\n\r\n    /*jshint maxparams:4 */\r\n    var startPolling = function (data, pollId, callback, uninstall) {\r\n        polls.push({data: data, id: pollId, callback: callback, uninstall: uninstall});\r\n    };\r\n    /*jshint maxparams:3 */\r\n\r\n    var stopPolling = function (pollId) {\r\n        for (var i = polls.length; i--;) {\r\n            var poll = polls[i];\r\n            if (poll.id === pollId) {\r\n                polls.splice(i, 1);\r\n            }\r\n        }\r\n    };\r\n\r\n    var reset = function () {\r\n        polls.forEach(function (poll) {\r\n            poll.uninstall(poll.id); \r\n        });\r\n        polls = [];\r\n    };\r\n\r\n    var poll = function () {\r\n        polls.forEach(function (data) {\r\n            var result = send(data.data);\r\n            if (!(result instanceof Array) || result.length === 0) {\r\n                return;\r\n            }\r\n            data.callback(result);\r\n        });\r\n        setTimeout(poll, c.ETH_POLLING_TIMEOUT);\r\n    };\r\n    \r\n    poll();\r\n\r\n    return {\r\n        send: send,\r\n        setProvider: setProvider,\r\n        startPolling: startPolling,\r\n        stopPolling: stopPolling,\r\n        reset: reset\r\n    };\r\n};\r\n\r\nmodule.exports = requestManager;\r\n\r\n",
    "/*\r\n    This file is part of ethereum.js.\r\n\r\n    ethereum.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ethereum.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/** @file shh.js\r\n * @authors:\r\n *   Marek Kotewicz <marek@ethdev.com>\r\n * @date 2015\r\n */\r\n\r\n/// @returns an array of objects describing web3.shh api methods\r\nvar methods = function () {\r\n    return [\r\n    { name: 'post', call: 'shh_post' },\r\n    { name: 'newIdentity', call: 'shh_newIdentity' },\r\n    { name: 'haveIdentity', call: 'shh_haveIdentity' },\r\n    { name: 'newGroup', call: 'shh_newGroup' },\r\n    { name: 'addToGroup', call: 'shh_addToGroup' }\r\n    ];\r\n};\r\n\r\nmodule.exports = {\r\n    methods: methods\r\n};\r\n\r\n",
    "/*\r\n    This file is part of ethereum.js.\r\n\r\n    ethereum.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ethereum.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/** @file types.js\r\n * @authors:\r\n *   Marek Kotewicz <marek@ethdev.com>\r\n * @date 2015\r\n */\r\n\r\nvar f = require('./formatters');\r\n\r\n/// @param expected type prefix (string)\r\n/// @returns function which checks if type has matching prefix. if yes, returns true, otherwise false\r\nvar prefixedType = function (prefix) {\r\n    return function (type) {\r\n        return type.indexOf(prefix) === 0;\r\n    };\r\n};\r\n\r\n/// @param expected type name (string)\r\n/// @returns function which checks if type is matching expected one. if yes, returns true, otherwise false\r\nvar namedType = function (name) {\r\n    return function (type) {\r\n        return name === type;\r\n    };\r\n};\r\n\r\n/// Setups input formatters for solidity types\r\n/// @returns an array of input formatters \r\nvar inputTypes = function () {\r\n    \r\n    return [\r\n        { type: prefixedType('uint'), format: f.formatInputInt },\r\n        { type: prefixedType('int'), format: f.formatInputInt },\r\n        { type: prefixedType('hash'), format: f.formatInputInt },\r\n        { type: prefixedType('string'), format: f.formatInputString }, \r\n        { type: prefixedType('real'), format: f.formatInputReal },\r\n        { type: prefixedType('ureal'), format: f.formatInputReal },\r\n        { type: namedType('address'), format: f.formatInputInt },\r\n        { type: namedType('bool'), format: f.formatInputBool }\r\n    ];\r\n};\r\n\r\n/// Setups output formaters for solidity types\r\n/// @returns an array of output formatters\r\nvar outputTypes = function () {\r\n\r\n    return [\r\n        { type: prefixedType('uint'), format: f.formatOutputUInt },\r\n        { type: prefixedType('int'), format: f.formatOutputInt },\r\n        { type: prefixedType('hash'), format: f.formatOutputHash },\r\n        { type: prefixedType('string'), format: f.formatOutputString },\r\n        { type: prefixedType('real'), format: f.formatOutputReal },\r\n        { type: prefixedType('ureal'), format: f.formatOutputUReal },\r\n        { type: namedType('address'), format: f.formatOutputAddress },\r\n        { type: namedType('bool'), format: f.formatOutputBool }\r\n    ];\r\n};\r\n\r\nmodule.exports = {\r\n    prefixedType: prefixedType,\r\n    namedType: namedType,\r\n    inputTypes: inputTypes,\r\n    outputTypes: outputTypes\r\n};\r\n\r\n",
    "/*\r\n    This file is part of ethereum.js.\r\n\r\n    ethereum.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ethereum.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/** @file utils.js\r\n * @authors:\r\n *   Marek Kotewicz <marek@ethdev.com>\r\n * @date 2015\r\n */\r\n\r\nvar c = require('./const');\r\n\r\n/// Finds first index of array element matching pattern\r\n/// @param array\r\n/// @param callback pattern\r\n/// @returns index of element\r\nvar findIndex = function (array, callback) {\r\n    var end = false;\r\n    var i = 0;\r\n    for (; i < array.length && !end; i++) {\r\n        end = callback(array[i]);\r\n    }\r\n    return end ? i - 1 : -1;\r\n};\r\n\r\n/// @returns ascii string representation of hex value prefixed with 0x\r\nvar toAscii = function(hex) {\r\n// Find termination\r\n    var str = \"\";\r\n    var i = 0, l = hex.length;\r\n    if (hex.substring(0, 2) === '0x') {\r\n        i = 2;\r\n    }\r\n    for (; i < l; i+=2) {\r\n        var code = parseInt(hex.substr(i, 2), 16);\r\n        if (code === 0) {\r\n            break;\r\n        }\r\n\r\n        str += String.fromCharCode(code);\r\n    }\r\n\r\n    return str;\r\n};\r\n    \r\nvar toHex = function(str) {\r\n    var hex = \"\";\r\n    for(var i = 0; i < str.length; i++) {\r\n        var n = str.charCodeAt(i).toString(16);\r\n        hex += n.length < 2 ? '0' + n : n;\r\n    }\r\n\r\n    return hex;\r\n};\r\n\r\n/// @returns hex representation (prefixed by 0x) of ascii string\r\nvar fromAscii = function(str, pad) {\r\n    pad = pad === undefined ? 0 : pad;\r\n    var hex = toHex(str);\r\n    while (hex.length < pad*2)\r\n        hex += \"00\";\r\n    return \"0x\" + hex;\r\n};\r\n\r\n/// @returns display name for function/event eg. multiply(uint256) -> multiply\r\nvar extractDisplayName = function (name) {\r\n    var length = name.indexOf('('); \r\n    return length !== -1 ? name.substr(0, length) : name;\r\n};\r\n\r\n/// @returns overloaded part of function/event name\r\nvar extractTypeName = function (name) {\r\n    /// TODO: make it invulnerable\r\n    var length = name.indexOf('(');\r\n    return length !== -1 ? name.substr(length + 1, name.length - 1 - (length + 1)).replace(' ', '') : \"\";\r\n};\r\n\r\n/// Filters all function from input abi\r\n/// @returns abi array with filtered objects of type 'function'\r\nvar filterFunctions = function (json) {\r\n    return json.filter(function (current) {\r\n        return current.type === 'function'; \r\n    }); \r\n};\r\n\r\n/// Filters all events form input abi\r\n/// @returns abi array with filtered objects of type 'event'\r\nvar filterEvents = function (json) {\r\n    return json.filter(function (current) {\r\n        return current.type === 'event';\r\n    });\r\n};\r\n\r\n/// used to transform value/string to eth string\r\n/// TODO: use BigNumber.js to parse int\r\n/// TODO: add tests for it!\r\nvar toEth = function (str) {\r\n     /*jshint maxcomplexity:7 */\r\n    var val = typeof str === \"string\" ? str.indexOf('0x') === 0 ? parseInt(str.substr(2), 16) : parseInt(str) : str;\r\n    var unit = 0;\r\n    var units = c.ETH_UNITS;\r\n    while (val > 3000 && unit < units.length - 1)\r\n    {\r\n        val /= 1000;\r\n        unit++;\r\n    }\r\n    var s = val.toString().length < val.toFixed(2).length ? val.toString() : val.toFixed(2);\r\n    var replaceFunction = function($0, $1, $2) {\r\n        return $1 + ',' + $2;\r\n    };\r\n\r\n    while (true) {\r\n        var o = s;\r\n        s = s.replace(/(\\d)(\\d\\d\\d[\\.\\,])/, replaceFunction);\r\n        if (o === s)\r\n            break;\r\n    }\r\n    return s + ' ' + units[unit];\r\n};\r\n\r\nmodule.exports = {\r\n    findIndex: findIndex,\r\n    toAscii: toAscii,\r\n    fromAscii: fromAscii,\r\n    extractDisplayName: extractDisplayName,\r\n    extractTypeName: extractTypeName,\r\n    filterFunctions: filterFunctions,\r\n    filterEvents: filterEvents,\r\n    toEth: toEth\r\n};\r\n\r\n",
    "/*\r\n    This file is part of ethereum.js.\r\n\r\n    ethereum.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ethereum.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/** @file watches.js\r\n * @authors:\r\n *   Marek Kotewicz <marek@ethdev.com>\r\n * @date 2015\r\n */\r\n\r\n/// @returns an array of objects describing web3.eth.watch api methods\r\nvar eth = function () {\r\n    var newFilter = function (args) {\r\n        return typeof args[0] === 'string' ? 'eth_newFilterString' : 'eth_newFilter';\r\n    };\r\n\r\n    return [\r\n    { name: 'newFilter', call: newFilter },\r\n    { name: 'uninstallFilter', call: 'eth_uninstallFilter' },\r\n    { name: 'getMessages', call: 'eth_filterLogs' }\r\n    ];\r\n};\r\n\r\n/// @returns an array of objects describing web3.shh.watch api methods\r\nvar shh = function () {\r\n    return [\r\n    { name: 'newFilter', call: 'shh_newFilter' },\r\n    { name: 'uninstallFilter', call: 'shh_uninstallFilter' },\r\n    { name: 'getMessages', call: 'shh_getMessages' }\r\n    ];\r\n};\r\n\r\nmodule.exports = {\r\n    eth: eth,\r\n    shh: shh\r\n};\r\n\r\n",
    "/*\r\n    This file is part of ethereum.js.\r\n\r\n    ethereum.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    ethereum.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/** @file web3.js\r\n * @authors:\r\n *   Jeffrey Wilcke <jeff@ethdev.com>\r\n *   Marek Kotewicz <marek@ethdev.com>\r\n *   Marian Oancea <marian@ethdev.com>\r\n *   Gav Wood <g@ethdev.com>\r\n * @date 2014\r\n */\r\n\r\nif (\"build\" !== 'build') {/*\r\n    var BigNumber = require('bignumber.js');\r\n*/}\r\n\r\nvar eth = require('./eth');\r\nvar db = require('./db');\r\nvar shh = require('./shh');\r\nvar watches = require('./watches');\r\nvar filter = require('./filter');\r\nvar utils = require('./utils');\r\nvar requestManager = require('./requestmanager');\r\n\r\n/// @returns an array of objects describing web3 api methods\r\nvar web3Methods = function () {\r\n    return [\r\n    { name: 'sha3', call: 'web3_sha3' }\r\n    ];\r\n};\r\n\r\n/// creates methods in a given object based on method description on input\r\n/// setups api calls for these methods\r\nvar setupMethods = function (obj, methods) {\r\n    methods.forEach(function (method) {\r\n        obj[method.name] = function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            var call = typeof method.call === 'function' ? method.call(args) : method.call;\r\n            return web3.manager.send({\r\n                method: call,\r\n                params: args\r\n            });\r\n        };\r\n    });\r\n};\r\n\r\n/// creates properties in a given object based on properties description on input\r\n/// setups api calls for these properties\r\nvar setupProperties = function (obj, properties) {\r\n    properties.forEach(function (property) {\r\n        var proto = {};\r\n        proto.get = function () {\r\n            return web3.manager.send({\r\n                method: property.getter\r\n            });\r\n        };\r\n\r\n        if (property.setter) {\r\n            proto.set = function (val) {\r\n                return web3.manager.send({\r\n                    method: property.setter,\r\n                    params: [val]\r\n                });\r\n            };\r\n        }\r\n        Object.defineProperty(obj, property.name, proto);\r\n    });\r\n};\r\n\r\n/*jshint maxparams:4 */\r\nvar startPolling = function (method, id, callback, uninstall) {\r\n    web3.manager.startPolling({\r\n        method: method, \r\n        params: [id]\r\n    }, id,  callback, uninstall); \r\n};\r\n/*jshint maxparams:3 */\r\n\r\nvar stopPolling = function (id) {\r\n    web3.manager.stopPolling(id);\r\n};\r\n\r\nvar ethWatch = {\r\n    startPolling: startPolling.bind(null, 'eth_changed'), \r\n    stopPolling: stopPolling\r\n};\r\n\r\nvar shhWatch = {\r\n    startPolling: startPolling.bind(null, 'shh_changed'), \r\n    stopPolling: stopPolling\r\n};\r\n\r\n/// setups web3 object, and it's in-browser executed methods\r\nvar web3 = {\r\n    manager: requestManager(),\r\n    providers: {},\r\n\r\n    /// @returns ascii string representation of hex value prefixed with 0x\r\n    toAscii: utils.toAscii,\r\n\r\n    /// @returns hex representation (prefixed by 0x) of ascii string\r\n    fromAscii: utils.fromAscii,\r\n\r\n    /// @returns decimal representaton of hex value prefixed by 0x\r\n    toDecimal: function (val) {\r\n        // remove 0x and place 0, if it's required\r\n        val = val.length > 2 ? val.substring(2) : \"0\";\r\n        return (new BigNumber(val, 16).toString(10));\r\n    },\r\n\r\n    /// @returns hex representation (prefixed by 0x) of decimal value\r\n    fromDecimal: function (val) {\r\n        return \"0x\" + (new BigNumber(val).toString(16));\r\n    },\r\n\r\n    /// used to transform value/string to eth string\r\n    toEth: utils.toEth,\r\n\r\n    /// eth object prototype\r\n    eth: {\r\n        contractFromAbi: function (abi) {\r\n            return function(addr) {\r\n                // Default to address of Config. TODO: rremove prior to genesis.\r\n                addr = addr || '0xc6d9d2cd449a754c494264e1809c50e34d64562b';\r\n                var ret = web3.eth.contract(addr, abi);\r\n                ret.address = addr;\r\n                return ret;\r\n            };\r\n        },\r\n\r\n        /// @param filter may be a string, object or event\r\n        /// @param indexed is optional, this is an object with optional event indexed params\r\n        /// @param options is optional, this is an object with optional event options ('max'...)\r\n        /// TODO: fix it, 4 params? no way\r\n        /*jshint maxparams:4 */\r\n        watch: function (fil, indexed, options, formatter) {\r\n            if (fil._isEvent) {\r\n                return fil(indexed, options);\r\n            }\r\n            return filter(fil, ethWatch, formatter);\r\n        }\r\n        /*jshint maxparams:3 */\r\n    },\r\n\r\n    /// db object prototype\r\n    db: {},\r\n\r\n    /// shh object prototype\r\n    shh: {\r\n        /// @param filter may be a string, object or event\r\n        watch: function (fil) {\r\n            return filter(fil, shhWatch);\r\n        }\r\n    },\r\n    setProvider: function (provider) {\r\n        web3.manager.setProvider(provider);\r\n    },\r\n    \r\n    /// Should be called to reset state of web3 object\r\n    /// Resets everything except manager\r\n    reset: function () {\r\n        web3.manager.reset(); \r\n    }\r\n};\r\n\r\n/// setups all api methods\r\nsetupMethods(web3, web3Methods());\r\nsetupMethods(web3.eth, eth.methods());\r\nsetupProperties(web3.eth, eth.properties());\r\nsetupMethods(web3.db, db.methods());\r\nsetupMethods(web3.shh, shh.methods());\r\nsetupMethods(ethWatch, watches.eth());\r\nsetupMethods(shhWatch, watches.shh());\r\n\r\nmodule.exports = web3;\r\n\r\n",
    "var web3 = require('./lib/web3');\r\nweb3.providers.HttpSyncProvider = require('./lib/httpsync');\r\nweb3.providers.QtSyncProvider = require('./lib/qtsync');\r\nweb3.eth.contract = require('./lib/contract');\r\nweb3.abi = require('./lib/abi');\r\n\r\nmodule.exports = web3;\r\n"
  ]
}